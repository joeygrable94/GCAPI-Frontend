// This file is auto-generated by @hey-api/openapi-ts

import { client, type Options } from '@hey-api/client-fetch';
import type {
  PublicStatusApiV1StatusGetData,
  PublicStatusApiV1StatusGetError,
  PublicStatusApiV1StatusGetResponse,
  PublicRateLimitedMultipleApiV1RateLimitedMultipleGetData,
  PublicRateLimitedMultipleApiV1RateLimitedMultipleGetError,
  PublicRateLimitedMultipleApiV1RateLimitedMultipleGetResponse,
  SecureTestSecurityScopeApiV1TestScopeGetError,
  SecureTestSecurityScopeApiV1TestScopeGetResponse,
  SecureGetCsrfApiV1CsrfGetError,
  SecureGetCsrfApiV1CsrfGetResponse,
  SecureCheckCsrfApiV1CsrfPostError,
  SecureCheckCsrfApiV1CsrfPostResponse,
  SecureSecureEncryptMessageApiV1EncryptMessagePostData,
  SecureSecureEncryptMessageApiV1EncryptMessagePostError,
  SecureSecureEncryptMessageApiV1EncryptMessagePostResponse,
  SecureSecureDecryptMessageApiV1DecryptMessagePostData,
  SecureSecureDecryptMessageApiV1DecryptMessagePostError,
  SecureSecureDecryptMessageApiV1DecryptMessagePostResponse,
  TasksGetStatusApiV1TasksTaskIdGetData,
  TasksGetStatusApiV1TasksTaskIdGetError,
  TasksGetStatusApiV1TasksTaskIdGetResponse,
  UsersCurrentApiV1UsersMeGetError,
  UsersCurrentApiV1UsersMeGetResponse,
  UsersListApiV1UsersGetData,
  UsersListApiV1UsersGetError,
  UsersListApiV1UsersGetResponse,
  UsersReadApiV1UsersUserIdGetData,
  UsersReadApiV1UsersUserIdGetError,
  UsersReadApiV1UsersUserIdGetResponse,
  UsersUpdateApiV1UsersUserIdPatchData,
  UsersUpdateApiV1UsersUserIdPatchError,
  UsersUpdateApiV1UsersUserIdPatchResponse,
  UsersDeleteApiV1UsersUserIdDeleteData,
  UsersDeleteApiV1UsersUserIdDeleteError,
  UsersDeleteApiV1UsersUserIdDeleteResponse,
  UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostData,
  UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostError,
  UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostResponse,
  UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostData,
  UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostError,
  UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostResponse,
  ClientsListApiV1ClientsGetData,
  ClientsListApiV1ClientsGetError,
  ClientsListApiV1ClientsGetResponse,
  ClientsCreateApiV1ClientsPostData,
  ClientsCreateApiV1ClientsPostError,
  ClientsCreateApiV1ClientsPostResponse,
  ClientsReadApiV1ClientsClientIdGetData,
  ClientsReadApiV1ClientsClientIdGetError,
  ClientsReadApiV1ClientsClientIdGetResponse,
  ClientsUpdateApiV1ClientsClientIdPatchData,
  ClientsUpdateApiV1ClientsClientIdPatchError,
  ClientsUpdateApiV1ClientsClientIdPatchResponse,
  ClientsDeleteApiV1ClientsClientIdDeleteData,
  ClientsDeleteApiV1ClientsClientIdDeleteError,
  ClientsDeleteApiV1ClientsClientIdDeleteResponse,
  ClientsAssignUserApiV1ClientsClientIdAssignUserPostData,
  ClientsAssignUserApiV1ClientsClientIdAssignUserPostError,
  ClientsAssignUserApiV1ClientsClientIdAssignUserPostResponse,
  ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostData,
  ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostError,
  ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostResponse,
  ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostData,
  ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostError,
  ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostResponse,
  ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostData,
  ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostError,
  ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostResponse,
  ClientReportsListApiV1ClientsReportsClientIdGetData,
  ClientReportsListApiV1ClientsReportsClientIdGetError,
  ClientReportsListApiV1ClientsReportsClientIdGetResponse,
  ClientReportsCreateApiV1ClientsReportsClientIdPostData,
  ClientReportsCreateApiV1ClientsReportsClientIdPostError,
  ClientReportsCreateApiV1ClientsReportsClientIdPostResponse,
  ClientReportsReadApiV1ClientsReportsClientIdReportIdGetData,
  ClientReportsReadApiV1ClientsReportsClientIdReportIdGetError,
  ClientReportsReadApiV1ClientsReportsClientIdReportIdGetResponse,
  ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchData,
  ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchError,
  ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchResponse,
  ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteData,
  ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteError,
  ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteResponse,
  ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetData,
  ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetError,
  ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetResponse,
  ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostData,
  ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostError,
  ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostResponse,
  NotesListApiV1NotesGetData,
  NotesListApiV1NotesGetError,
  NotesListApiV1NotesGetResponse,
  NotesCreateApiV1NotesPostData,
  NotesCreateApiV1NotesPostError,
  NotesCreateApiV1NotesPostResponse,
  NotesReadApiV1NotesNoteIdGetData,
  NotesReadApiV1NotesNoteIdGetError,
  NotesReadApiV1NotesNoteIdGetResponse,
  NotesUpdateApiV1NotesNoteIdPatchData,
  NotesUpdateApiV1NotesNoteIdPatchError,
  NotesUpdateApiV1NotesNoteIdPatchResponse,
  NotesDeleteApiV1NotesNoteIdDeleteData,
  NotesDeleteApiV1NotesNoteIdDeleteError,
  NotesDeleteApiV1NotesNoteIdDeleteResponse,
  BdxFeedListApiV1BdxGetData,
  BdxFeedListApiV1BdxGetError,
  BdxFeedListApiV1BdxGetResponse,
  BdxFeedCreateApiV1BdxPostData,
  BdxFeedCreateApiV1BdxPostError,
  BdxFeedCreateApiV1BdxPostResponse,
  BdxFeedReadApiV1BdxBdxIdGetData,
  BdxFeedReadApiV1BdxBdxIdGetError,
  BdxFeedReadApiV1BdxBdxIdGetResponse,
  BdxFeedUpdateApiV1BdxBdxIdPatchData,
  BdxFeedUpdateApiV1BdxBdxIdPatchError,
  BdxFeedUpdateApiV1BdxBdxIdPatchResponse,
  BdxFeedDeleteApiV1BdxBdxIdDeleteData,
  BdxFeedDeleteApiV1BdxBdxIdDeleteError,
  BdxFeedDeleteApiV1BdxBdxIdDeleteResponse,
  SharpspringListApiV1SharpspringGetData,
  SharpspringListApiV1SharpspringGetError,
  SharpspringListApiV1SharpspringGetResponse,
  SharpspringCreateApiV1SharpspringPostData,
  SharpspringCreateApiV1SharpspringPostError,
  SharpspringCreateApiV1SharpspringPostResponse,
  SharpspringReadApiV1SharpspringSsIdGetData,
  SharpspringReadApiV1SharpspringSsIdGetError,
  SharpspringReadApiV1SharpspringSsIdGetResponse,
  SharpspringUpdateApiV1SharpspringSsIdPatchData,
  SharpspringUpdateApiV1SharpspringSsIdPatchError,
  SharpspringUpdateApiV1SharpspringSsIdPatchResponse,
  SharpspringDeleteApiV1SharpspringSsIdDeleteData,
  SharpspringDeleteApiV1SharpspringSsIdDeleteError,
  SharpspringDeleteApiV1SharpspringSsIdDeleteResponse,
  GoCloudPropertyListApiV1GoCloudGetData,
  GoCloudPropertyListApiV1GoCloudGetError,
  GoCloudPropertyListApiV1GoCloudGetResponse,
  GoCloudPropertyCreateApiV1GoCloudPostData,
  GoCloudPropertyCreateApiV1GoCloudPostError,
  GoCloudPropertyCreateApiV1GoCloudPostResponse,
  GoCloudPropertyReadApiV1GoCloudGoCloudIdGetData,
  GoCloudPropertyReadApiV1GoCloudGoCloudIdGetError,
  GoCloudPropertyReadApiV1GoCloudGoCloudIdGetResponse,
  GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchData,
  GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchError,
  GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchResponse,
  GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteData,
  GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteError,
  GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteResponse,
  Ga4PropertyListApiV1Ga4PropertyGetData,
  Ga4PropertyListApiV1Ga4PropertyGetError,
  Ga4PropertyListApiV1Ga4PropertyGetResponse,
  Ga4PropertyCreateApiV1Ga4PropertyPostData,
  Ga4PropertyCreateApiV1Ga4PropertyPostError,
  Ga4PropertyCreateApiV1Ga4PropertyPostResponse,
  Ga4PropertyReadApiV1Ga4PropertyGa4IdGetData,
  Ga4PropertyReadApiV1Ga4PropertyGa4IdGetError,
  Ga4PropertyReadApiV1Ga4PropertyGa4IdGetResponse,
  Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchData,
  Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchError,
  Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchResponse,
  Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteData,
  Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteError,
  Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteResponse,
  Ga4StreamListApiV1Ga4StreamGetData,
  Ga4StreamListApiV1Ga4StreamGetError,
  Ga4StreamListApiV1Ga4StreamGetResponse,
  Ga4StreamCreateApiV1Ga4StreamPostData,
  Ga4StreamCreateApiV1Ga4StreamPostError,
  Ga4StreamCreateApiV1Ga4StreamPostResponse,
  Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetData,
  Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetError,
  Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetResponse,
  Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchData,
  Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchError,
  Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchResponse,
  Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteData,
  Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteError,
  Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteResponse,
  GoSearchConsolePropertyListApiV1GoSearchPropertyGetData,
  GoSearchConsolePropertyListApiV1GoSearchPropertyGetError,
  GoSearchConsolePropertyListApiV1GoSearchPropertyGetResponse,
  GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostData,
  GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostError,
  GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostResponse,
  GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetData,
  GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetError,
  GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetResponse,
  GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchData,
  GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchError,
  GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchResponse,
  GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteData,
  GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteError,
  GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteResponse,
  GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetData,
  GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetError,
  GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetResponse,
  GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetData,
  GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetError,
  GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetResponse,
  GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostData,
  GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostError,
  GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostResponse,
  GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetData,
  GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetError,
  GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetResponse,
  GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchData,
  GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchError,
  GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchResponse,
  GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteData,
  GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteError,
  GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteResponse,
  WebsitesListApiV1WebsitesGetData,
  WebsitesListApiV1WebsitesGetError,
  WebsitesListApiV1WebsitesGetResponse,
  WebsitesCreateApiV1WebsitesPostData,
  WebsitesCreateApiV1WebsitesPostError,
  WebsitesCreateApiV1WebsitesPostResponse,
  WebsitesReadApiV1WebsitesWebsiteIdGetData,
  WebsitesReadApiV1WebsitesWebsiteIdGetError,
  WebsitesReadApiV1WebsitesWebsiteIdGetResponse,
  WebsitesUpdateApiV1WebsitesWebsiteIdPatchData,
  WebsitesUpdateApiV1WebsitesWebsiteIdPatchError,
  WebsitesUpdateApiV1WebsitesWebsiteIdPatchResponse,
  WebsitesDeleteApiV1WebsitesWebsiteIdDeleteData,
  WebsitesDeleteApiV1WebsitesWebsiteIdDeleteError,
  WebsitesDeleteApiV1WebsitesWebsiteIdDeleteResponse,
  WebsitePagesListApiV1WebpagesGetData,
  WebsitePagesListApiV1WebpagesGetError,
  WebsitePagesListApiV1WebpagesGetResponse,
  WebsitePagesCreateApiV1WebpagesPostData,
  WebsitePagesCreateApiV1WebpagesPostError,
  WebsitePagesCreateApiV1WebpagesPostResponse,
  WebsitePagesReadApiV1WebpagesPageIdGetData,
  WebsitePagesReadApiV1WebpagesPageIdGetError,
  WebsitePagesReadApiV1WebpagesPageIdGetResponse,
  WebsitePagesUpdateApiV1WebpagesPageIdPatchData,
  WebsitePagesUpdateApiV1WebpagesPageIdPatchError,
  WebsitePagesUpdateApiV1WebpagesPageIdPatchResponse,
  WebsitePagesDeleteApiV1WebpagesPageIdDeleteData,
  WebsitePagesDeleteApiV1WebpagesPageIdDeleteError,
  WebsitePagesDeleteApiV1WebpagesPageIdDeleteResponse,
  WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostData,
  WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostError,
  WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostResponse,
  WebsiteSitemapsListApiV1SitemapsGetData,
  WebsiteSitemapsListApiV1SitemapsGetError,
  WebsiteSitemapsListApiV1SitemapsGetResponse,
  WebsiteSitemapsCreateApiV1SitemapsPostData,
  WebsiteSitemapsCreateApiV1SitemapsPostError,
  WebsiteSitemapsCreateApiV1SitemapsPostResponse,
  WebsiteSitemapsReadApiV1SitemapsSitemapIdGetData,
  WebsiteSitemapsReadApiV1SitemapsSitemapIdGetError,
  WebsiteSitemapsReadApiV1SitemapsSitemapIdGetResponse,
  WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchData,
  WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchError,
  WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchResponse,
  WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteData,
  WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteError,
  WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteResponse,
  WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetData,
  WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetError,
  WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetResponse,
  WebsitePageSpeedInsightsListApiV1PsiGetData,
  WebsitePageSpeedInsightsListApiV1PsiGetError,
  WebsitePageSpeedInsightsListApiV1PsiGetResponse,
  WebsitePageSpeedInsightsCreateApiV1PsiPostData,
  WebsitePageSpeedInsightsCreateApiV1PsiPostError,
  WebsitePageSpeedInsightsCreateApiV1PsiPostResponse,
  WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetData,
  WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetError,
  WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetResponse,
  WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteData,
  WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteError,
  WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteResponse,
  WebsitePageKeywordCorpusListApiV1KwcGetData,
  WebsitePageKeywordCorpusListApiV1KwcGetError,
  WebsitePageKeywordCorpusListApiV1KwcGetResponse,
  WebsitePageKeywordCorpusCreateApiV1KwcPostData,
  WebsitePageKeywordCorpusCreateApiV1KwcPostError,
  WebsitePageKeywordCorpusCreateApiV1KwcPostResponse,
  WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetData,
  WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetError,
  WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetResponse,
  WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteData,
  WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteError,
  WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteResponse
} from './types.gen';

/**
 * Public:Status
 * Retrieve the status of the API.
 *
 * Permissions:
 * ------------
 * anyone can access this endpoint
 *
 * Returns:
 * --------
 * `Dict[str, Any]` : a dictionary containing the status of the API
 */
export const publicStatusApiV1StatusGet = (
  options?: Options<PublicStatusApiV1StatusGetData>
) => {
  return (options?.client ?? client).get<
    PublicStatusApiV1StatusGetResponse,
    PublicStatusApiV1StatusGetError
  >({
    ...options,
    url: '/api/v1/status'
  });
};

/**
 * Public:Rate Limited Multiple
 */
export const publicRateLimitedMultipleApiV1RateLimitedMultipleGet = (
  options?: Options<PublicRateLimitedMultipleApiV1RateLimitedMultipleGetData>
) => {
  return (options?.client ?? client).get<
    PublicRateLimitedMultipleApiV1RateLimitedMultipleGetResponse,
    PublicRateLimitedMultipleApiV1RateLimitedMultipleGetError
  >({
    ...options,
    url: '/api/v1/rate-limited-multiple'
  });
};

/**
 * Secure:Test Security Scope
 */
export const secureTestSecurityScopeApiV1TestScopeGet = (options?: Options) => {
  return (options?.client ?? client).get<
    SecureTestSecurityScopeApiV1TestScopeGetResponse,
    SecureTestSecurityScopeApiV1TestScopeGetError
  >({
    ...options,
    url: '/api/v1/test-scope'
  });
};

/**
 * Secure:Get Csrf
 * Generates an secure CSRF token for the API.
 *
 * Permissions:
 * ------------
 * any logged in user can access this endpoint
 *
 * Returns:
 * --------
 * `Dict[str, Any]` : a dictionary containing the CSRF token for the API
 */
export const secureGetCsrfApiV1CsrfGet = (options?: Options) => {
  return (options?.client ?? client).get<
    SecureGetCsrfApiV1CsrfGetResponse,
    SecureGetCsrfApiV1CsrfGetError
  >({
    ...options,
    url: '/api/v1/csrf'
  });
};

/**
 * Secure:Check Csrf
 * Verifies an secure CSRF token for the API.
 *
 * Permissions:
 * ------------
 * any logged in user can access this endpoint
 *
 * Returns:
 * --------
 * `Dict[str, Any]` : a dictionary containing the CSRF token for the API
 */
export const secureCheckCsrfApiV1CsrfPost = (options?: Options) => {
  return (options?.client ?? client).post<
    SecureCheckCsrfApiV1CsrfPostResponse,
    SecureCheckCsrfApiV1CsrfPostError
  >({
    ...options,
    url: '/api/v1/csrf'
  });
};

/**
 * Secure:Secure Encrypt Message
 * Encrypts a message using AES signed by an RSA key.
 */
export const secureSecureEncryptMessageApiV1EncryptMessagePost = (
  options: Options<SecureSecureEncryptMessageApiV1EncryptMessagePostData>
) => {
  return (options?.client ?? client).post<
    SecureSecureEncryptMessageApiV1EncryptMessagePostResponse,
    SecureSecureEncryptMessageApiV1EncryptMessagePostError
  >({
    ...options,
    url: '/api/v1/encrypt/message'
  });
};

/**
 * Secure:Secure Decrypt Message
 * Decrypts and verifies the RSA signature of a securely encrypted message.
 */
export const secureSecureDecryptMessageApiV1DecryptMessagePost = (
  options: Options<SecureSecureDecryptMessageApiV1DecryptMessagePostData>
) => {
  return (options?.client ?? client).post<
    SecureSecureDecryptMessageApiV1DecryptMessagePostResponse,
    SecureSecureDecryptMessageApiV1DecryptMessagePostError
  >({
    ...options,
    url: '/api/v1/decrypt/message'
  });
};

/**
 * Tasks:Get Status
 * Retrieve the status of a task by task_id.
 *
 * Permissions:
 * ------------
 * `role=user` : all tasks
 *
 * Returns:
 * --------
 * `TaskState` : a dictionary containing the worker task id, status,
 * and maybe the result
 */
export const tasksGetStatusApiV1TasksTaskIdGet = (
  options: Options<TasksGetStatusApiV1TasksTaskIdGetData>
) => {
  return (options?.client ?? client).get<
    TasksGetStatusApiV1TasksTaskIdGetResponse,
    TasksGetStatusApiV1TasksTaskIdGetError
  >({
    ...options,
    url: '/api/v1/tasks/{task_id}'
  });
};

/**
 * Users:Current
 * Retrieve the profile information about the currently active, verified user.
 *
 * Permissions:
 * ------------
 * anyone can access this endpoint
 *
 * Returns:
 * --------
 * a dictionary containing the user profile information
 *
 * - `UserReadAsAdmin` : all fields
 * - `UserReadAsManager` : only fields accessible to the manager role
 * - `UserRead` : only publically accessible fields
 */
export const usersCurrentApiV1UsersMeGet = (options?: Options) => {
  return (options?.client ?? client).get<
    UsersCurrentApiV1UsersMeGetResponse,
    UsersCurrentApiV1UsersMeGetError
  >({
    ...options,
    url: '/api/v1/users/me'
  });
};

/**
 * Users:List
 * Retrieve a paginated list of users.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all users
 *
 * Returns:
 * --------
 * a paginated response containing a list of users
 *
 * - `Paginated[UserReadAsAdmin]` : all fields
 * - `Paginated[UserReadAsManager]` : only fields accessibile to the
 * manager role
 */
export const usersListApiV1UsersGet = (
  options?: Options<UsersListApiV1UsersGetData>
) => {
  return (options?.client ?? client).get<
    UsersListApiV1UsersGetResponse,
    UsersListApiV1UsersGetError
  >({
    ...options,
    url: '/api/v1/users/'
  });
};

/**
 * Users:Read
 * Retrieve a single user by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all users
 *
 * `role=client` : all users associated with the client through the `user_client`
 * table
 *
 * `role=employee` : all users associated with any clients they are associated with
 * through the `user_client`
 *
 * `role=user` : only their own user profile id
 *
 * Returns:
 * --------
 * a dictionary containing the user profile information
 *
 * - `UserReadAsAdmin` : all fields
 * - `UserReadAsManager` : only fields accessible to the manager role
 * - `UserRead` : only publically accessible fields
 */
export const usersReadApiV1UsersUserIdGet = (
  options: Options<UsersReadApiV1UsersUserIdGetData>
) => {
  return (options?.client ?? client).get<
    UsersReadApiV1UsersUserIdGetResponse,
    UsersReadApiV1UsersUserIdGetError
  >({
    ...options,
    url: '/api/v1/users/{user_id}'
  });
};

/**
 * Users:Update
 * Update a user by id. Users may update limited fields of their own data,
 * and maybe the fields of other users depending on their role.
 *
 * Permissions:
 * ------------
 * `role=admin` : all users, all fields
 *
 * `role=manager` : all users, limited fields
 *
 * `role=user` : only their own public profile fields
 *
 * Returns:
 * --------
 * the updated user object
 *
 * - `UserReadAsAdmin` : all fields
 * - `UserReadAsManager` : only fields accessible to the manager role
 * - `UserRead` : only publically accessible fields
 */
export const usersUpdateApiV1UsersUserIdPatch = (
  options: Options<UsersUpdateApiV1UsersUserIdPatchData>
) => {
  return (options?.client ?? client).patch<
    UsersUpdateApiV1UsersUserIdPatchResponse,
    UsersUpdateApiV1UsersUserIdPatchError
  >({
    ...options,
    url: '/api/v1/users/{user_id}'
  });
};

/**
 * Users:Delete
 * Delete a user by id.
 *
 * Permissions:
 * ------------
 * `role=admin` : all users
 *
 * `role=user` : may request to have their profile and all associated data deleted
 *
 * Returns:
 * --------
 * `UserDelete` : a message indicating the user was deleted or requested to be
 * deleted with the user id and corresponding task id
 */
export const usersDeleteApiV1UsersUserIdDelete = (
  options: Options<UsersDeleteApiV1UsersUserIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    UsersDeleteApiV1UsersUserIdDeleteResponse,
    UsersDeleteApiV1UsersUserIdDeleteError
  >({
    ...options,
    url: '/api/v1/users/{user_id}'
  });
};

/**
 * Users:Add Privileges
 * Add privileges to a user by id.
 *
 * Permissions:
 * ------------
 * `role=admin` : all users
 *
 * `role=manager` : cannot add the RoleAdmin privilege
 *
 * Returns:
 * --------
 * the updated user object
 *
 * - `UserReadAsAdmin` : all fields
 * - `UserReadAsManager` : only fields accessible to the manager role
 */
export const usersAddPrivilegesApiV1UsersUserIdPrivilegesAddPost = (
  options: Options<UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostData>
) => {
  return (options?.client ?? client).post<
    UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostResponse,
    UsersAddPrivilegesApiV1UsersUserIdPrivilegesAddPostError
  >({
    ...options,
    url: '/api/v1/users/{user_id}/privileges/add'
  });
};

/**
 * Users:Remove Privileges
 * Remove privileges from a user by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all users
 *
 * Returns:
 * --------
 * the updated user object
 *
 * - `UserReadAsAdmin` : all fields
 * - `UserReadAsManager` : only fields accessible to the manager role
 */
export const usersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePost = (
  options: Options<UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostData>
) => {
  return (options?.client ?? client).post<
    UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostResponse,
    UsersRemovePrivilegesApiV1UsersUserIdPrivilegesRemovePostError
  >({
    ...options,
    url: '/api/v1/users/{user_id}/privileges/remove'
  });
};

/**
 * Clients:List
 * Retrieve a paginated list of clients.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all clients
 *
 * `role=user` : only clients associated with the user via `user_client`
 * table
 *
 * Returns:
 * --------
 * `Paginated[ClientRead]` : a paginated list of clients, optionally filtered
 */
export const clientsListApiV1ClientsGet = (
  options?: Options<ClientsListApiV1ClientsGetData>
) => {
  return (options?.client ?? client).get<
    ClientsListApiV1ClientsGetResponse,
    ClientsListApiV1ClientsGetError
  >({
    ...options,
    url: '/api/v1/clients/'
  });
};

/**
 * Clients:Create
 * Create a new client.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new client
 *
 * Returns:
 * --------
 * `ClientRead` : the newly created client
 */
export const clientsCreateApiV1ClientsPost = (
  options: Options<ClientsCreateApiV1ClientsPostData>
) => {
  return (options?.client ?? client).post<
    ClientsCreateApiV1ClientsPostResponse,
    ClientsCreateApiV1ClientsPostError
  >({
    ...options,
    url: '/api/v1/clients/'
  });
};

/**
 * Clients:Read
 * Retrieve a single client by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all clients
 *
 * `role=user` : only clients associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `ClientRead` : a client matching the client_id
 */
export const clientsReadApiV1ClientsClientIdGet = (
  options: Options<ClientsReadApiV1ClientsClientIdGetData>
) => {
  return (options?.client ?? client).get<
    ClientsReadApiV1ClientsClientIdGetResponse,
    ClientsReadApiV1ClientsClientIdGetError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}'
  });
};

/**
 * Clients:Update
 * Update a client by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all clients
 *
 * `role=user` : only clients associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `ClientRead` : the updated client
 */
export const clientsUpdateApiV1ClientsClientIdPatch = (
  options: Options<ClientsUpdateApiV1ClientsClientIdPatchData>
) => {
  return (options?.client ?? client).patch<
    ClientsUpdateApiV1ClientsClientIdPatchResponse,
    ClientsUpdateApiV1ClientsClientIdPatchError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}'
  });
};

/**
 * Clients:Delete
 * Delete a client by id.
 *
 * Permissions:
 * ------------
 * `role=admin` : all clients
 *
 * `role=client` : may request to have their client data deleted
 *
 * Returns:
 * --------
 * `ClientDelete` : a message indicating the user deleted a client or if a user
 * requested to delete a client they are associated with
 */
export const clientsDeleteApiV1ClientsClientIdDelete = (
  options: Options<ClientsDeleteApiV1ClientsClientIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    ClientsDeleteApiV1ClientsClientIdDeleteResponse,
    ClientsDeleteApiV1ClientsClientIdDeleteError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}'
  });
};

/**
 * Clients:Assign User
 * Assigns a user to a client.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : ...
 *
 * Returns:
 * --------
 * `UserClientRead` : the user client relationship that was created
 */
export const clientsAssignUserApiV1ClientsClientIdAssignUserPost = (
  options: Options<ClientsAssignUserApiV1ClientsClientIdAssignUserPostData>
) => {
  return (options?.client ?? client).post<
    ClientsAssignUserApiV1ClientsClientIdAssignUserPostResponse,
    ClientsAssignUserApiV1ClientsClientIdAssignUserPostError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}/assign/user'
  });
};

/**
 * Clients:Remove User
 * Removes a user from a client.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : ...
 *
 * Returns:
 * --------
 * `UserClientRead` : the user client relationship that was deleted
 */
export const clientsRemoveUserApiV1ClientsClientIdRemoveUserPost = (
  options: Options<ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostData>
) => {
  return (options?.client ?? client).post<
    ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostResponse,
    ClientsRemoveUserApiV1ClientsClientIdRemoveUserPostError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}/remove/user'
  });
};

/**
 * Clients:Assign Website
 * Assigns a website to a client.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : ...
 *
 * Returns:
 * --------
 * `ClientWebsiteRead` : the client website relationship that was deleted
 */
export const clientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePost = (
  options: Options<ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostData>
) => {
  return (options?.client ?? client).post<
    ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostResponse,
    ClientsAssignWebsiteApiV1ClientsClientIdAssignWebsitePostError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}/assign/website'
  });
};

/**
 * Clients:Remove Website
 * Removes a website from a client.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : ...
 *
 * Returns:
 * --------
 * `ClientWebsiteRead` : the client website relationship that was deleted
 */
export const clientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePost = (
  options: Options<ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostData>
) => {
  return (options?.client ?? client).post<
    ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostResponse,
    ClientsRemoveWebsiteApiV1ClientsClientIdRemoveWebsitePostError
  >({
    ...options,
    url: '/api/v1/clients/{client_id}/remove/website'
  });
};

/**
 * Client Reports:List
 * Retrieve a paginated list of client reports.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all client report
 *
 * `role=user` : only client reports associated with the current user
 *
 * Returns:
 * --------
 * `Paginated[ClientReportRead]` : a paginated list of client reports,
 * optionally filtered
 */
export const clientReportsListApiV1ClientsReportsClientIdGet = (
  options: Options<ClientReportsListApiV1ClientsReportsClientIdGetData>
) => {
  return (options?.client ?? client).get<
    ClientReportsListApiV1ClientsReportsClientIdGetResponse,
    ClientReportsListApiV1ClientsReportsClientIdGetError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}'
  });
};

/**
 * Client Reports:Create
 * Create a new client report.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new client report for all clients
 *
 * `role=user` : create only client reports associated with the current user
 *
 * Returns:
 * --------
 * `ClientReportRead` : the newly created client
 */
export const clientReportsCreateApiV1ClientsReportsClientIdPost = (
  options: Options<ClientReportsCreateApiV1ClientsReportsClientIdPostData>
) => {
  return (options?.client ?? client).post<
    ClientReportsCreateApiV1ClientsReportsClientIdPostResponse,
    ClientReportsCreateApiV1ClientsReportsClientIdPostError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}'
  });
};

/**
 * Client Reports:Read
 * Retrieve a single client report by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all client reports
 *
 * `role=user` : only client reports associated with the current user
 *
 * Returns:
 * --------
 * `ClientReportRead` : a client report matching the client_id
 */
export const clientReportsReadApiV1ClientsReportsClientIdReportIdGet = (
  options: Options<ClientReportsReadApiV1ClientsReportsClientIdReportIdGetData>
) => {
  return (options?.client ?? client).get<
    ClientReportsReadApiV1ClientsReportsClientIdReportIdGetResponse,
    ClientReportsReadApiV1ClientsReportsClientIdReportIdGetError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}/{report_id}'
  });
};

/**
 * Client Reports:Update
 * Update a client report by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all client reports
 *
 * `role=user` : only client reports associated with the current user
 *
 * Returns:
 * --------
 * `ClientReportRead` : the updated client report
 */
export const clientReportsUpdateApiV1ClientsReportsClientIdReportIdPatch = (
  options: Options<ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchData>
) => {
  return (options?.client ?? client).patch<
    ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchResponse,
    ClientReportsUpdateApiV1ClientsReportsClientIdReportIdPatchError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}/{report_id}'
  });
};

/**
 * Client Reports:Delete
 * Delete a client report by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any client reports
 *
 * `role=user` : delete only client reports associated with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const clientReportsDeleteApiV1ClientsReportsClientIdReportIdDelete = (
  options: Options<ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteResponse,
    ClientReportsDeleteApiV1ClientsReportsClientIdReportIdDeleteError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}/{report_id}'
  });
};

/**
 * Client Report Notes:List
 * Creates a new note and assigns it to the client report.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all client report notes
 *
 * `role=user` : only client report notes associated with the current user
 *
 * Returns:
 * --------
 * `Paginated[NoteRead]` : paginated list of client report notes
 */
export const clientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGet = (
  options: Options<ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetData>
) => {
  return (options?.client ?? client).get<
    ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetResponse,
    ClientReportNotesListApiV1ClientsReportsClientIdReportIdNotesGetError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}/{report_id}/notes'
  });
};

/**
 * Client Report Notes:Create
 * Creates a new note and assigns it to the client report.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all client report notes
 *
 * `role=user` : only client report notes associated with the current user
 *
 * Returns:
 * --------
 * `NoteRead` : the client report note created
 */
export const clientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPost = (
  options: Options<ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostData>
) => {
  return (options?.client ?? client).post<
    ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostResponse,
    ClientReportNotesCreateApiV1ClientsReportsClientIdReportIdNotesPostError
  >({
    ...options,
    url: '/api/v1/clients/reports/{client_id}/{report_id}/notes'
  });
};

/**
 * Notes:List
 * Retrieve a paginated list of notes.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all notes
 *
 * `role=user` : only notes that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[NoteRead]` : a paginated list of notes, optionally filtered
 */
export const notesListApiV1NotesGet = (
  options?: Options<NotesListApiV1NotesGetData>
) => {
  return (options?.client ?? client).get<
    NotesListApiV1NotesGetResponse,
    NotesListApiV1NotesGetError
  >({
    ...options,
    url: '/api/v1/notes/'
  });
};

/**
 * Notes:Create
 * Create a new note.
 *
 * Permissions:
 * ------------
 * any `role` : create a new note, notes belong to one user
 *
 * Returns:
 * --------
 * `NoteRead` : the newly created note
 */
export const notesCreateApiV1NotesPost = (
  options: Options<NotesCreateApiV1NotesPostData>
) => {
  return (options?.client ?? client).post<
    NotesCreateApiV1NotesPostResponse,
    NotesCreateApiV1NotesPostError
  >({
    ...options,
    url: '/api/v1/notes/'
  });
};

/**
 * Notes:Read
 * Retrieve a single note by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all notes
 *
 * `role=user` : read only notes that belong to the user
 *
 * Returns:
 * --------
 * `NoteRead` : the note matching the note_id
 */
export const notesReadApiV1NotesNoteIdGet = (
  options: Options<NotesReadApiV1NotesNoteIdGetData>
) => {
  return (options?.client ?? client).get<
    NotesReadApiV1NotesNoteIdGetResponse,
    NotesReadApiV1NotesNoteIdGetError
  >({
    ...options,
    url: '/api/v1/notes/{note_id}'
  });
};

/**
 * Notes:Update
 * Update a note by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all notes
 *
 * `role=user` : update only notes that belong to the user
 *
 * Returns:
 * --------
 * `NoteRead` : the updated note
 */
export const notesUpdateApiV1NotesNoteIdPatch = (
  options: Options<NotesUpdateApiV1NotesNoteIdPatchData>
) => {
  return (options?.client ?? client).patch<
    NotesUpdateApiV1NotesNoteIdPatchResponse,
    NotesUpdateApiV1NotesNoteIdPatchError
  >({
    ...options,
    url: '/api/v1/notes/{note_id}'
  });
};

/**
 * Notes:Delete
 * Delete a note by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete all notes
 *
 * `role=user` : delete only notes that belong to the user
 *
 * Returns:
 * --------
 * `None`
 */
export const notesDeleteApiV1NotesNoteIdDelete = (
  options: Options<NotesDeleteApiV1NotesNoteIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    NotesDeleteApiV1NotesNoteIdDeleteResponse,
    NotesDeleteApiV1NotesNoteIdDeleteError
  >({
    ...options,
    url: '/api/v1/notes/{note_id}'
  });
};

/**
 * Bdx Feed:List
 * Retrieve a paginated list of bdx_feeds.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all bdx_feeds
 *
 * `role=user` : only bdx_feeds that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[BdxFeedRead]` : a paginated list of bdx_feeds,
 * optionally filtered
 */
export const bdxFeedListApiV1BdxGet = (
  options?: Options<BdxFeedListApiV1BdxGetData>
) => {
  return (options?.client ?? client).get<
    BdxFeedListApiV1BdxGetResponse,
    BdxFeedListApiV1BdxGetError
  >({
    ...options,
    url: '/api/v1/bdx/'
  });
};

/**
 * Bdx Feed:Create
 * Create a new bdx_feeds.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new bdx_feeds for all clients
 *
 * `role=user` : create only bdx_feeds that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `BdxFeedRead` : the newly created bdx_feed
 */
export const bdxFeedCreateApiV1BdxPost = (
  options: Options<BdxFeedCreateApiV1BdxPostData>
) => {
  return (options?.client ?? client).post<
    BdxFeedCreateApiV1BdxPostResponse,
    BdxFeedCreateApiV1BdxPostError
  >({
    ...options,
    url: '/api/v1/bdx/'
  });
};

/**
 * Bdx Feed:Read
 * Retrieve a single bdx_feed by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all bdx_feeds
 *
 * `role=user` : read only bdx_feeds that belong to any clients
 * associated with the current user
 *
 * Returns:
 * --------
 * `BdxFeedRead` : the bdx_feed matching the bdx_id
 */
export const bdxFeedReadApiV1BdxBdxIdGet = (
  options: Options<BdxFeedReadApiV1BdxBdxIdGetData>
) => {
  return (options?.client ?? client).get<
    BdxFeedReadApiV1BdxBdxIdGetResponse,
    BdxFeedReadApiV1BdxBdxIdGetError
  >({
    ...options,
    url: '/api/v1/bdx/{bdx_id}'
  });
};

/**
 * Bdx Feed:Update
 * Update a bdx_feed by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all bdx_feeds
 *
 * `role=user` : update only bdx_feeds that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `BdxFeedRead` : the updated bdx_feed
 */
export const bdxFeedUpdateApiV1BdxBdxIdPatch = (
  options: Options<BdxFeedUpdateApiV1BdxBdxIdPatchData>
) => {
  return (options?.client ?? client).patch<
    BdxFeedUpdateApiV1BdxBdxIdPatchResponse,
    BdxFeedUpdateApiV1BdxBdxIdPatchError
  >({
    ...options,
    url: '/api/v1/bdx/{bdx_id}'
  });
};

/**
 * Bdx Feed:Delete
 * Delete a bdx_feed by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any bdx_feeds
 *
 * `role=user` : delete only bdx_feeds that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const bdxFeedDeleteApiV1BdxBdxIdDelete = (
  options: Options<BdxFeedDeleteApiV1BdxBdxIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    BdxFeedDeleteApiV1BdxBdxIdDeleteResponse,
    BdxFeedDeleteApiV1BdxBdxIdDeleteError
  >({
    ...options,
    url: '/api/v1/bdx/{bdx_id}'
  });
};

/**
 * Sharpspring:List
 * Retrieve a paginated list of sharpspring accounts.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all sharpspring accounts
 *
 * `role=user` : only sharpspring accounts that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[SharpspringRead]` : a paginated list of sharpspring accounts,
 * optionally filtered
 */
export const sharpspringListApiV1SharpspringGet = (
  options?: Options<SharpspringListApiV1SharpspringGetData>
) => {
  return (options?.client ?? client).get<
    SharpspringListApiV1SharpspringGetResponse,
    SharpspringListApiV1SharpspringGetError
  >({
    ...options,
    url: '/api/v1/sharpspring/'
  });
};

/**
 * Sharpspring:Create
 * Create a new sharpspring account.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new sharpspring accounts for all clients
 *
 * `role=user` : create only sharpspring accounts that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `SharpspringRead` : the newly created sharpspring account
 */
export const sharpspringCreateApiV1SharpspringPost = (
  options: Options<SharpspringCreateApiV1SharpspringPostData>
) => {
  return (options?.client ?? client).post<
    SharpspringCreateApiV1SharpspringPostResponse,
    SharpspringCreateApiV1SharpspringPostError
  >({
    ...options,
    url: '/api/v1/sharpspring/'
  });
};

/**
 * Sharpspring:Read
 * Retrieve a single sharpspring account by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all sharpspring accounts
 *
 * `role=user` : read only sharpspring accounts that belong to any clients
 * associated with the current user
 *
 * Returns:
 * --------
 * `SharpspringRead` : the sharpspring account matching the ss_id
 */
export const sharpspringReadApiV1SharpspringSsIdGet = (
  options: Options<SharpspringReadApiV1SharpspringSsIdGetData>
) => {
  return (options?.client ?? client).get<
    SharpspringReadApiV1SharpspringSsIdGetResponse,
    SharpspringReadApiV1SharpspringSsIdGetError
  >({
    ...options,
    url: '/api/v1/sharpspring/{ss_id}'
  });
};

/**
 * Sharpspring:Update
 * Update a sharpspring account by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all sharpspring accounts
 *
 * `role=user` : update only sharpspring accounts that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `SharpspringRead` : the updated sharpspring account
 */
export const sharpspringUpdateApiV1SharpspringSsIdPatch = (
  options: Options<SharpspringUpdateApiV1SharpspringSsIdPatchData>
) => {
  return (options?.client ?? client).patch<
    SharpspringUpdateApiV1SharpspringSsIdPatchResponse,
    SharpspringUpdateApiV1SharpspringSsIdPatchError
  >({
    ...options,
    url: '/api/v1/sharpspring/{ss_id}'
  });
};

/**
 * Sharpspring:Delete
 * Delete a sharpspring account by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any sharpspring accounts
 *
 * `role=user` : delete only sharpspring accounts that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const sharpspringDeleteApiV1SharpspringSsIdDelete = (
  options: Options<SharpspringDeleteApiV1SharpspringSsIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    SharpspringDeleteApiV1SharpspringSsIdDeleteResponse,
    SharpspringDeleteApiV1SharpspringSsIdDeleteError
  >({
    ...options,
    url: '/api/v1/sharpspring/{ss_id}'
  });
};

/**
 * Go Cloud Property:List
 * Retrieve a paginated list of go_cloud property.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all go_cloud properties
 *
 * `role=user` : only go_cloud properties that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoCloudPropertyRead]` : a paginated list of go_cloud properties,
 * optionally filtered
 */
export const goCloudPropertyListApiV1GoCloudGet = (
  options?: Options<GoCloudPropertyListApiV1GoCloudGetData>
) => {
  return (options?.client ?? client).get<
    GoCloudPropertyListApiV1GoCloudGetResponse,
    GoCloudPropertyListApiV1GoCloudGetError
  >({
    ...options,
    url: '/api/v1/go/cloud/'
  });
};

/**
 * Go Cloud Property:Create
 * Create a new go_cloud property.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new go_cloud properties for all clients
 *
 * `role=user` : create only go_cloud properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoCloudPropertyRead` : the newly created go_cloud
 */
export const goCloudPropertyCreateApiV1GoCloudPost = (
  options: Options<GoCloudPropertyCreateApiV1GoCloudPostData>
) => {
  return (options?.client ?? client).post<
    GoCloudPropertyCreateApiV1GoCloudPostResponse,
    GoCloudPropertyCreateApiV1GoCloudPostError
  >({
    ...options,
    url: '/api/v1/go/cloud/'
  });
};

/**
 * Go Cloud Property:Read
 * Retrieve a single go_cloud property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all go_cloud properties
 *
 * `role=user` : read only go_cloud properties that belong to any clients
 * associated with the current user
 *
 * Returns:
 * --------
 * `GoCloudPropertyRead` : the go_cloud matching the go_cloud_id
 */
export const goCloudPropertyReadApiV1GoCloudGoCloudIdGet = (
  options: Options<GoCloudPropertyReadApiV1GoCloudGoCloudIdGetData>
) => {
  return (options?.client ?? client).get<
    GoCloudPropertyReadApiV1GoCloudGoCloudIdGetResponse,
    GoCloudPropertyReadApiV1GoCloudGoCloudIdGetError
  >({
    ...options,
    url: '/api/v1/go/cloud/{go_cloud_id}'
  });
};

/**
 * Go Cloud Property:Update
 * Update a go_cloud by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all go_cloud properties
 *
 * `role=user` : update only go_cloud properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoCloudPropertyRead` : the updated go_cloud property
 */
export const goCloudPropertyUpdateApiV1GoCloudGoCloudIdPatch = (
  options: Options<GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchData>
) => {
  return (options?.client ?? client).patch<
    GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchResponse,
    GoCloudPropertyUpdateApiV1GoCloudGoCloudIdPatchError
  >({
    ...options,
    url: '/api/v1/go/cloud/{go_cloud_id}'
  });
};

/**
 * Go Cloud Property:Delete
 * Delete a go_cloud property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any go_cloud properties
 *
 * `role=user` : delete only go_cloud properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const goCloudPropertyDeleteApiV1GoCloudGoCloudIdDelete = (
  options: Options<GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteResponse,
    GoCloudPropertyDeleteApiV1GoCloudGoCloudIdDeleteError
  >({
    ...options,
    url: '/api/v1/go/cloud/{go_cloud_id}'
  });
};

/**
 * Ga4 Property:List
 * Retrieve a paginated list of ga4 properties.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all ga4 properties
 *
 * `role=user` : only ga4 properties that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoAnalytics4PropertyRead]` : a paginated list of ga4 properties,
 * optionally filtered
 */
export const ga4PropertyListApiV1Ga4PropertyGet = (
  options?: Options<Ga4PropertyListApiV1Ga4PropertyGetData>
) => {
  return (options?.client ?? client).get<
    Ga4PropertyListApiV1Ga4PropertyGetResponse,
    Ga4PropertyListApiV1Ga4PropertyGetError
  >({
    ...options,
    url: '/api/v1/ga4/property/'
  });
};

/**
 * Ga4 Property:Create
 * Create a new ga4 properties.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new ga4 properties for all clients
 *
 * `role=user` : create only ga4 properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4PropertyRead` : the newly created ga4 property
 */
export const ga4PropertyCreateApiV1Ga4PropertyPost = (
  options: Options<Ga4PropertyCreateApiV1Ga4PropertyPostData>
) => {
  return (options?.client ?? client).post<
    Ga4PropertyCreateApiV1Ga4PropertyPostResponse,
    Ga4PropertyCreateApiV1Ga4PropertyPostError
  >({
    ...options,
    url: '/api/v1/ga4/property/'
  });
};

/**
 * Ga4 Property:Read
 * Retrieve a single ga4 property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all ga4 properties
 *
 * `role=user` : read only ga4 properties that belong to any clients
 * associated with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4PropertyRead` : the ga4 property matching the ga4_id
 */
export const ga4PropertyReadApiV1Ga4PropertyGa4IdGet = (
  options: Options<Ga4PropertyReadApiV1Ga4PropertyGa4IdGetData>
) => {
  return (options?.client ?? client).get<
    Ga4PropertyReadApiV1Ga4PropertyGa4IdGetResponse,
    Ga4PropertyReadApiV1Ga4PropertyGa4IdGetError
  >({
    ...options,
    url: '/api/v1/ga4/property/{ga4_id}'
  });
};

/**
 * Ga4 Property:Update
 * Update a ga4 property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all ga4 properties
 *
 * `role=user` : update only ga4 properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4PropertyRead` : the updated ga4 property
 */
export const ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatch = (
  options: Options<Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchData>
) => {
  return (options?.client ?? client).patch<
    Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchResponse,
    Ga4PropertyUpdateApiV1Ga4PropertyGa4IdPatchError
  >({
    ...options,
    url: '/api/v1/ga4/property/{ga4_id}'
  });
};

/**
 * Ga4 Property:Delete
 * Delete a ga4 property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any ga4 properties
 *
 * `role=user` : delete only ga4 properties that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const ga4PropertyDeleteApiV1Ga4PropertyGa4IdDelete = (
  options: Options<Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteData>
) => {
  return (options?.client ?? client).delete<
    Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteResponse,
    Ga4PropertyDeleteApiV1Ga4PropertyGa4IdDeleteError
  >({
    ...options,
    url: '/api/v1/ga4/property/{ga4_id}'
  });
};

/**
 * Ga4 Stream:List
 * Retrieve a paginated list of ga4 streams.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all ga4 streams
 *
 * `role=user` : only ga4 streams that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoAnalytics4StreamRead]` : a paginated list of ga4 streams,
 * optionally filtered
 */
export const ga4StreamListApiV1Ga4StreamGet = (
  options?: Options<Ga4StreamListApiV1Ga4StreamGetData>
) => {
  return (options?.client ?? client).get<
    Ga4StreamListApiV1Ga4StreamGetResponse,
    Ga4StreamListApiV1Ga4StreamGetError
  >({
    ...options,
    url: '/api/v1/ga4/stream/'
  });
};

/**
 * Ga4 Stream:Create
 * Create a new ga4 streams.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new ga4 streams for all clients
 *
 * `role=user` : create only ga4 streams that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4StreamRead` : the newly created ga4 stream
 */
export const ga4StreamCreateApiV1Ga4StreamPost = (
  options: Options<Ga4StreamCreateApiV1Ga4StreamPostData>
) => {
  return (options?.client ?? client).post<
    Ga4StreamCreateApiV1Ga4StreamPostResponse,
    Ga4StreamCreateApiV1Ga4StreamPostError
  >({
    ...options,
    url: '/api/v1/ga4/stream/'
  });
};

/**
 * Ga4 Stream:Read
 * Retrieve a single ga4 stream by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all ga4 streams
 *
 * `role=user` : read only ga4 streams that belong to any clients
 * associated with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4StreamRead` : the ga4 stream matching the ga4_stream_id
 */
export const ga4StreamReadApiV1Ga4StreamGa4StreamIdGet = (
  options: Options<Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetData>
) => {
  return (options?.client ?? client).get<
    Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetResponse,
    Ga4StreamReadApiV1Ga4StreamGa4StreamIdGetError
  >({
    ...options,
    url: '/api/v1/ga4/stream/{ga4_stream_id}'
  });
};

/**
 * Ga4 Stream:Update
 * Update a ga4 stream by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all ga4 streams
 *
 * `role=user` : update only ga4 streams that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `GoAnalytics4StreamRead` : the updated ga4 stream
 */
export const ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatch = (
  options: Options<Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchData>
) => {
  return (options?.client ?? client).patch<
    Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchResponse,
    Ga4StreamUpdateApiV1Ga4StreamGa4StreamIdPatchError
  >({
    ...options,
    url: '/api/v1/ga4/stream/{ga4_stream_id}'
  });
};

/**
 * Ga4 Stream:Delete
 * Delete a ga4 stream by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any ga4 streams
 *
 * `role=user` : delete only ga4 streams that belong to any clients associated
 * with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDelete = (
  options: Options<Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteResponse,
    Ga4StreamDeleteApiV1Ga4StreamGa4StreamIdDeleteError
  >({
    ...options,
    url: '/api/v1/ga4/stream/{ga4_stream_id}'
  });
};

/**
 * Go Search Console Property:List
 * Retrieve a paginated list of google search console properties.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all google search console properties
 *
 * `role=user` : only google search console properties that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoSearchConsolePropertyRead]` : a paginated list of google search
 * console properties, optionally filtered
 */
export const goSearchConsolePropertyListApiV1GoSearchPropertyGet = (
  options?: Options<GoSearchConsolePropertyListApiV1GoSearchPropertyGetData>
) => {
  return (options?.client ?? client).get<
    GoSearchConsolePropertyListApiV1GoSearchPropertyGetResponse,
    GoSearchConsolePropertyListApiV1GoSearchPropertyGetError
  >({
    ...options,
    url: '/api/v1/go/search/property/'
  });
};

/**
 * Go Search Console Property:Create
 * Create a new google search console properties.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new google search console properties
 * for all clients
 *
 * `role=user` : create only google search console properties that belong
 * to any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsolePropertyRead` : the newly created google search console
 * property
 */
export const goSearchConsolePropertyCreateApiV1GoSearchPropertyPost = (
  options: Options<GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostData>
) => {
  return (options?.client ?? client).post<
    GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostResponse,
    GoSearchConsolePropertyCreateApiV1GoSearchPropertyPostError
  >({
    ...options,
    url: '/api/v1/go/search/property/'
  });
};

/**
 * Go Search Console Property:Read
 * Retrieve a single google search console property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all google search console properties
 *
 * `role=user` : read only google search console properties that belong to
 * any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsolePropertyRead` : the google search console property matching
 * the gsc_id
 */
export const goSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGet = (
  options: Options<GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetData>
) => {
  return (options?.client ?? client).get<
    GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetResponse,
    GoSearchConsolePropertyReadApiV1GoSearchPropertyGscIdGetError
  >({
    ...options,
    url: '/api/v1/go/search/property/{gsc_id}'
  });
};

/**
 * Go Search Console Property:Update
 * Update a google search console property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all google search console properties
 *
 * `role=user` : update only google search console properties that belong to
 * any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsolePropertyRead` : the updated google search console property
 */
export const goSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatch = (
  options: Options<GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchData>
) => {
  return (options?.client ?? client).patch<
    GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchResponse,
    GoSearchConsolePropertyUpdateApiV1GoSearchPropertyGscIdPatchError
  >({
    ...options,
    url: '/api/v1/go/search/property/{gsc_id}'
  });
};

/**
 * Go Search Console Property:Delete
 * Delete a google search console property by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any google search console properties
 *
 * `role=user` : delete only google search console properties that belong to
 * any clients associated with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const goSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDelete = (
  options: Options<GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteResponse,
    GoSearchConsolePropertyDeleteApiV1GoSearchPropertyGscIdDeleteError
  >({
    ...options,
    url: '/api/v1/go/search/property/{gsc_id}'
  });
};

/**
 * Go Search Console Property Metric:List All Metric Types
 * Retrieve a paginated list of all the google search console property metrics
 * for the given google search console property id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all google search console property metrics
 *
 * `role=user` : only google search console property metrics that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoSearchConsoleMetricRead]` : a paginated list of google search
 * console property metrics, optionally filtered
 */
export const goSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGet =
  (
    options: Options<GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetData>
  ) => {
    return (options?.client ?? client).get<
      GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetResponse,
      GoSearchConsolePropertyMetricListAllMetricTypesApiV1GoSearchMetricGscIdGetError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}'
    });
  };

/**
 * Go Search Console Property Metric:List By Metric Type
 * Retrieve a paginated list of google search console property metrics filtered
 * by the metric_type parameter.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all google search console property metrics
 *
 * `role=user` : only google search console property metrics that belong to the user
 *
 * Returns:
 * --------
 * `Paginated[GoSearchConsoleMetricRead]` : a paginated list of google search
 * console property metrics, optionally filtered
 */
export const goSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGet =
  (
    options: Options<GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetData>
  ) => {
    return (options?.client ?? client).get<
      GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetResponse,
      GoSearchConsolePropertyMetricListByMetricTypeApiV1GoSearchMetricGscIdMetricTypeGetError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}/{metric_type}'
    });
  };

/**
 * Go Search Console Property Metric:Create
 * Create a new google search console property metrics.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create new google search console property metrics
 * for all clients
 *
 * `role=user` : create only google search console property metrics that
 * belong to any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsoleMetricRead` : the newly created google search console
 * property metric.
 */
export const goSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePost =
  (
    options: Options<GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostData>
  ) => {
    return (options?.client ?? client).post<
      GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostResponse,
      GoSearchConsolePropertyMetricCreateApiV1GoSearchMetricGscIdMetricTypePostError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}/{metric_type}'
    });
  };

/**
 * Go Search Console Property Metric:Read
 * Retrieve a single google search console property metric by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read all google search console property metrics
 *
 * `role=user` : read only google search console property metrics that belong to
 * any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsoleMetricRead` : the google search console property metric matching
 * the metric_type and id
 */
export const goSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGet =
  (
    options: Options<GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetData>
  ) => {
    return (options?.client ?? client).get<
      GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetResponse,
      GoSearchConsolePropertyMetricReadApiV1GoSearchMetricGscIdMetricTypeMetricIdGetError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}/{metric_type}/{metric_id}'
    });
  };

/**
 * Go Search Console Property Metric:Update
 * Update a google search console property metric by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : update all google search console property metrics
 *
 * `role=user` : update only google search console property metrics that
 * belong to any clients associated with the current user
 *
 * Returns:
 * --------
 * `GoSearchConsoleMetricRead` : the updated google search console property metric
 */
export const goSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatch =
  (
    options: Options<GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchData>
  ) => {
    return (options?.client ?? client).patch<
      GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchResponse,
      GoSearchConsolePropertyMetricUpdateApiV1GoSearchMetricGscIdMetricTypeMetricIdPatchError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}/{metric_type}/{metric_id}'
    });
  };

/**
 * Go Search Console Property Metric:Delete
 * Delete a google search console property metric by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any google search console property metrics
 *
 * `role=user` : delete only google search console property metrics that
 * belong to any clients associated with the current user
 *
 * Returns:
 * --------
 * `None`
 */
export const goSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDelete =
  (
    options: Options<GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteData>
  ) => {
    return (options?.client ?? client).delete<
      GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteResponse,
      GoSearchConsolePropertyMetricDeleteApiV1GoSearchMetricGscIdMetricTypeMetricIdDeleteError
    >({
      ...options,
      url: '/api/v1/go/search/metric/{gsc_id}/{metric_type}/{metric_id}'
    });
  };

/**
 * Websites:List
 * Retrieve a paginated list of websites.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all websites
 *
 * `role=user` : only websites associated with the clients via `client_website`
 * that belong to the user via `user_client` table
 *
 * Returns:
 * --------
 * `Paginated[WebsiteRead]` : a paginated list of websites, optionally filtered
 */
export const websitesListApiV1WebsitesGet = (
  options?: Options<WebsitesListApiV1WebsitesGetData>
) => {
  return (options?.client ?? client).get<
    WebsitesListApiV1WebsitesGetResponse,
    WebsitesListApiV1WebsitesGetError
  >({
    ...options,
    url: '/api/v1/websites/'
  });
};

/**
 * Websites:Create
 * Create a new website.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new website
 *
 * Returns:
 * --------
 * `WebsiteRead` : the newly created website
 */
export const websitesCreateApiV1WebsitesPost = (
  options: Options<WebsitesCreateApiV1WebsitesPostData>
) => {
  return (options?.client ?? client).post<
    WebsitesCreateApiV1WebsitesPostResponse,
    WebsitesCreateApiV1WebsitesPostError
  >({
    ...options,
    url: '/api/v1/websites/'
  });
};

/**
 * Websites:Read
 * Retrieve a single website by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all websites
 *
 * `role=client` : only websites associated with the client via `client_website` table
 *
 * `role=employee` : only websites associated with clients they are associated with via
 * `user_client` table, and associated with the client via `client_website` table
 *
 * Returns:
 * --------
 * `WebsiteRead` : the website matching the website_id
 */
export const websitesReadApiV1WebsitesWebsiteIdGet = (
  options: Options<WebsitesReadApiV1WebsitesWebsiteIdGetData>
) => {
  return (options?.client ?? client).get<
    WebsitesReadApiV1WebsitesWebsiteIdGetResponse,
    WebsitesReadApiV1WebsitesWebsiteIdGetError
  >({
    ...options,
    url: '/api/v1/websites/{website_id}'
  });
};

/**
 * Websites:Update
 * Update a website by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all websites
 *
 * `role=client` : only websites associated with the client via `client_website` table
 *
 * `role=employee` : only websites associated with clients they are associated with via
 * `user_client` table, and associated with the client via `client_website` table
 *
 * Returns:
 * --------
 * `WebsiteRead` : the updated website
 */
export const websitesUpdateApiV1WebsitesWebsiteIdPatch = (
  options: Options<WebsitesUpdateApiV1WebsitesWebsiteIdPatchData>
) => {
  return (options?.client ?? client).patch<
    WebsitesUpdateApiV1WebsitesWebsiteIdPatchResponse,
    WebsitesUpdateApiV1WebsitesWebsiteIdPatchError
  >({
    ...options,
    url: '/api/v1/websites/{website_id}'
  });
};

/**
 * Websites:Delete
 * Delete a website by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all websites
 *
 * `role=client` : only websites associated with the client via `client_website` table
 *
 * `role=employee` : only websites associated with clients they are associated with via
 * `user_client` table, and associated with the client via `client_website` table
 *
 * Returns:
 * --------
 * `None`
 */
export const websitesDeleteApiV1WebsitesWebsiteIdDelete = (
  options: Options<WebsitesDeleteApiV1WebsitesWebsiteIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    WebsitesDeleteApiV1WebsitesWebsiteIdDeleteResponse,
    WebsitesDeleteApiV1WebsitesWebsiteIdDeleteError
  >({
    ...options,
    url: '/api/v1/websites/{website_id}'
  });
};

/**
 * Website Pages:List
 * Retrieve a paginated list of website pages.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website pages
 *
 * `role=client` : only website pages with a website_id associated with the client
 * via `client_website` table
 *
 * `role=employee` : only website pages with a website_id associated with a client's
 * website via `client_website` table, associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `Paginated[WebsitePageRead]` : a paginated list of website pages,
 * optionally filtered
 */
export const websitePagesListApiV1WebpagesGet = (
  options?: Options<WebsitePagesListApiV1WebpagesGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePagesListApiV1WebpagesGetResponse,
    WebsitePagesListApiV1WebpagesGetError
  >({
    ...options,
    url: '/api/v1/webpages/'
  });
};

/**
 * Website Pages:Create
 * Create a new website page.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new website page
 *
 * `role=user` : create a new website page that belongs to a website associated
 * with the client via `client_website` table, associated with the user via the
 * `user_client` table
 *
 * Returns:
 * --------
 * `WebsitePageRead` : the newly created website page
 */
export const websitePagesCreateApiV1WebpagesPost = (
  options: Options<WebsitePagesCreateApiV1WebpagesPostData>
) => {
  return (options?.client ?? client).post<
    WebsitePagesCreateApiV1WebpagesPostResponse,
    WebsitePagesCreateApiV1WebpagesPostError
  >({
    ...options,
    url: '/api/v1/webpages/'
  });
};

/**
 * Website Pages:Read
 * Retrieve a single website page by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website pages
 *
 * `role=user` : only website pages with a website_id associated with a client's
 * website via `client_website` table, associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `WebsitePageRead` : the website page requested by page_id
 */
export const websitePagesReadApiV1WebpagesPageIdGet = (
  options: Options<WebsitePagesReadApiV1WebpagesPageIdGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePagesReadApiV1WebpagesPageIdGetResponse,
    WebsitePagesReadApiV1WebpagesPageIdGetError
  >({
    ...options,
    url: '/api/v1/webpages/{page_id}'
  });
};

/**
 * Website Pages:Update
 * Update a website page by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website pages
 *
 * `role=user` : only website pages with a website_id associated with a client's
 * website via `client_website` table, associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `WebsitePageRead` : the updated website page
 */
export const websitePagesUpdateApiV1WebpagesPageIdPatch = (
  options: Options<WebsitePagesUpdateApiV1WebpagesPageIdPatchData>
) => {
  return (options?.client ?? client).patch<
    WebsitePagesUpdateApiV1WebpagesPageIdPatchResponse,
    WebsitePagesUpdateApiV1WebpagesPageIdPatchError
  >({
    ...options,
    url: '/api/v1/webpages/{page_id}'
  });
};

/**
 * Website Pages:Delete
 * Delete a website page by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website pages
 *
 * `role=user` : only website pages with a website_id associated with a client's
 * website via `client_website` table, associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `None`
 */
export const websitePagesDeleteApiV1WebpagesPageIdDelete = (
  options: Options<WebsitePagesDeleteApiV1WebpagesPageIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    WebsitePagesDeleteApiV1WebpagesPageIdDeleteResponse,
    WebsitePagesDeleteApiV1WebpagesPageIdDeleteError
  >({
    ...options,
    url: '/api/v1/webpages/{page_id}'
  });
};

/**
 * Website Pages:Process Website Page Speed Insights
 * A webhook to initiate processing a website page's page speed insights.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website pages
 *
 * `role=user` : only website pages with a website_id associated with a client's
 * website via `client_website` table, associated with the user via `user_client`
 *
 * Returns:
 * --------
 * `WebsitePagePSIProcessing` : a website page PSI processing object containing the
 * task_id's for the mobile and desktop page speed insights tasks
 */
export const websitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPost =
  (
    options: Options<WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostData>
  ) => {
    return (options?.client ?? client).post<
      WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostResponse,
      WebsitePagesProcessWebsitePageSpeedInsightsApiV1WebpagesPageIdProcessPsiPostError
    >({
      ...options,
      url: '/api/v1/webpages/{page_id}/process-psi'
    });
  };

/**
 * Website Sitemaps:List
 * Retrieve a paginated list of website maps.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website maps
 *
 * `role=user` : only website maps with a website_id associated with the clients
 * via `client_website` table, associated with the user via `user_client` table
 *
 * Returns:
 * --------
 * `Paginated[WebsiteMapRead]` : a paginated list of website maps,
 * optionally filtered
 */
export const websiteSitemapsListApiV1SitemapsGet = (
  options?: Options<WebsiteSitemapsListApiV1SitemapsGetData>
) => {
  return (options?.client ?? client).get<
    WebsiteSitemapsListApiV1SitemapsGetResponse,
    WebsiteSitemapsListApiV1SitemapsGetError
  >({
    ...options,
    url: '/api/v1/sitemaps/'
  });
};

/**
 * Website Sitemaps:Create
 * Create a new website map.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new website map
 *
 * `role=user` : create a new website map associated with a website that belongs to
 * a client the user belongs to via `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteMapRead` : the newly created website map
 */
export const websiteSitemapsCreateApiV1SitemapsPost = (
  options: Options<WebsiteSitemapsCreateApiV1SitemapsPostData>
) => {
  return (options?.client ?? client).post<
    WebsiteSitemapsCreateApiV1SitemapsPostResponse,
    WebsiteSitemapsCreateApiV1SitemapsPostError
  >({
    ...options,
    url: '/api/v1/sitemaps/'
  });
};

/**
 * Website Sitemaps:Read
 * Retrieve a single website map by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website maps
 *
 * `role=user` : only website maps belonging to a website that belongs to a client
 * the user is associated with to via `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteMapRead` : the website map
 */
export const websiteSitemapsReadApiV1SitemapsSitemapIdGet = (
  options: Options<WebsiteSitemapsReadApiV1SitemapsSitemapIdGetData>
) => {
  return (options?.client ?? client).get<
    WebsiteSitemapsReadApiV1SitemapsSitemapIdGetResponse,
    WebsiteSitemapsReadApiV1SitemapsSitemapIdGetError
  >({
    ...options,
    url: '/api/v1/sitemaps/{sitemap_id}'
  });
};

/**
 * Website Sitemaps:Update
 * Update a website map by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website maps
 *
 * `role=user` : only website maps belonging to a website that belongs to a client
 * the user is associated with to via `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteMapRead` : the updated website map
 */
export const websiteSitemapsUpdateApiV1SitemapsSitemapIdPatch = (
  options: Options<WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchData>
) => {
  return (options?.client ?? client).patch<
    WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchResponse,
    WebsiteSitemapsUpdateApiV1SitemapsSitemapIdPatchError
  >({
    ...options,
    url: '/api/v1/sitemaps/{sitemap_id}'
  });
};

/**
 * Website Sitemaps:Delete
 * Delete a website map by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website maps
 *
 * `role=user` : only website maps belonging to a website that belongs to a client
 * the user is associated with to via `user_client` table
 *
 * Returns:
 * --------
 * `None`
 */
export const websiteSitemapsDeleteApiV1SitemapsSitemapIdDelete = (
  options: Options<WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteResponse,
    WebsiteSitemapsDeleteApiV1SitemapsSitemapIdDeleteError
  >({
    ...options,
    url: '/api/v1/sitemaps/{sitemap_id}'
  });
};

/**
 * Website Sitemaps:Process Sitemap Pages
 * A webhook to initiate processing a sitemap's pages.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website maps
 *
 * `role=user` : only website maps belonging to a website that belongs to a client
 * the user is associated with to via `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteMapProcessing` : the task_id of the worker task
 */
export const websiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGet = (
  options: Options<WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetData>
) => {
  return (options?.client ?? client).get<
    WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetResponse,
    WebsiteSitemapsProcessSitemapPagesApiV1SitemapsSitemapIdProcessPagesGetError
  >({
    ...options,
    url: '/api/v1/sitemaps/{sitemap_id}/process-pages'
  });
};

/**
 * Website Page Speed Insights:List
 * Retrieve a paginated list of website page speed insights.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website page speed insights
 *
 * `role=client` : only website page speed insights with a website_id associated with
 * the client via `client_website` table
 *
 * `role=employee` : only website page speed insights with a website_id associated
 * with a client's website via `client_website` table, associated with the user
 * via `user_client`
 *
 * Returns:
 * --------
 * `Paginated[WebsitePageSpeedInsightsRead]` : a paginated list of website page speed
 * insights, optionally filtered
 */
export const websitePageSpeedInsightsListApiV1PsiGet = (
  options?: Options<WebsitePageSpeedInsightsListApiV1PsiGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePageSpeedInsightsListApiV1PsiGetResponse,
    WebsitePageSpeedInsightsListApiV1PsiGetError
  >({
    ...options,
    url: '/api/v1/psi/'
  });
};

/**
 * Website Page Speed Insights:Create
 * Create a new website page speed insights.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new website page speed insights
 *
 * `role=client` : create a new website page speed insights that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : create a new website page speed insights that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `WebsitePageSpeedInsightsRead` : the newly created website page speed insights
 */
export const websitePageSpeedInsightsCreateApiV1PsiPost = (
  options: Options<WebsitePageSpeedInsightsCreateApiV1PsiPostData>
) => {
  return (options?.client ?? client).post<
    WebsitePageSpeedInsightsCreateApiV1PsiPostResponse,
    WebsitePageSpeedInsightsCreateApiV1PsiPostError
  >({
    ...options,
    url: '/api/v1/psi/'
  });
};

/**
 * Website Page Speed Insights:Read
 * Retrieve a single website page speed insights by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read any website page speed insight
 *
 * `role=client` : read any website page speed insight that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : read any website page speed insight that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `WebsitePageSpeedInsightsRead` : the website page speed insights requested by psi_id
 */
export const websitePageSpeedInsightsReadApiV1PsiPsiIdGet = (
  options: Options<WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetResponse,
    WebsitePageSpeedInsightsReadApiV1PsiPsiIdGetError
  >({
    ...options,
    url: '/api/v1/psi/{psi_id}'
  });
};

/**
 * Website Page Speed Insights:Delete
 * Delete a single website page speed insights by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any website page speed insight
 *
 * `role=client` : delete any website page speed insight that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : delete any website page speed insight that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `None`
 */
export const websitePageSpeedInsightsDeleteApiV1PsiPsiIdDelete = (
  options: Options<WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteResponse,
    WebsitePageSpeedInsightsDeleteApiV1PsiPsiIdDeleteError
  >({
    ...options,
    url: '/api/v1/psi/{psi_id}'
  });
};

/**
 * Website Page Keyword Corpus:List
 * Retrieve a paginated list of website keyword corpus.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : all website keyword corpus
 *
 * `role=client` : only website keyword corpus with a website_id associated with
 * the client via `client_website` table
 *
 * `role=employee` : only website keyword corpus with a website_id associated
 * with a client's website via `client_website` table, associated with the user
 * via `user_client`
 *
 * Returns:
 * --------
 * `Paginated[WebsiteKeywordCorpusRead]` : a paginated list of website keyword corpus,
 * optionally filtered
 */
export const websitePageKeywordCorpusListApiV1KwcGet = (
  options?: Options<WebsitePageKeywordCorpusListApiV1KwcGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePageKeywordCorpusListApiV1KwcGetResponse,
    WebsitePageKeywordCorpusListApiV1KwcGetError
  >({
    ...options,
    url: '/api/v1/kwc/'
  });
};

/**
 * Website Page Keyword Corpus:Create
 * Create a new website keyword corpus.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : create a new website keyword corpus
 *
 * `role=client` : create a new website keyword corpus that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : create a new website keyword corpus that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteKeywordCorpusRead` : the newly created website keyword corpus
 */
export const websitePageKeywordCorpusCreateApiV1KwcPost = (
  options: Options<WebsitePageKeywordCorpusCreateApiV1KwcPostData>
) => {
  return (options?.client ?? client).post<
    WebsitePageKeywordCorpusCreateApiV1KwcPostResponse,
    WebsitePageKeywordCorpusCreateApiV1KwcPostError
  >({
    ...options,
    url: '/api/v1/kwc/'
  });
};

/**
 * Website Page Keyword Corpus:Read
 * Retrieve a single website keyword corpus by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : read any website keyword corpus
 *
 * `role=client` : read any website keyword corpus that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : read any website keyword corpus that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `WebsiteKeywordCorpusRead` : the website keyword corpus requested by kwc_id
 */
export const websitePageKeywordCorpusReadApiV1KwcKwcIdGet = (
  options: Options<WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetData>
) => {
  return (options?.client ?? client).get<
    WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetResponse,
    WebsitePageKeywordCorpusReadApiV1KwcKwcIdGetError
  >({
    ...options,
    url: '/api/v1/kwc/{kwc_id}'
  });
};

/**
 * Website Page Keyword Corpus:Delete
 * Delete a single website keyword corpus by id.
 *
 * Permissions:
 * ------------
 * `role=admin|manager` : delete any website keyword corpus
 *
 * `role=client` : delete any website keyword corpus that belongs to a website
 * associated with the client via `client_website` table
 *
 * `role=employee` : delete any website keyword corpus that belongs to a website
 * associated with a client via `client_website` table, associated with the user
 * via the `user_client` table
 *
 * Returns:
 * --------
 * `None`
 */
export const websitePageKeywordCorpusDeleteApiV1KwcKwcIdDelete = (
  options: Options<WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteData>
) => {
  return (options?.client ?? client).delete<
    WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteResponse,
    WebsitePageKeywordCorpusDeleteApiV1KwcKwcIdDeleteError
  >({
    ...options,
    url: '/api/v1/kwc/{kwc_id}'
  });
};
